var searchIndex = new Map(JSON.parse('[\
["cfg_if",{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"Q","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":"`","c":[],"p":[],"b":[]}],\
["esercizio9",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["getrandom",{"doc":"Interface to the operating system’s random number …","t":"TTFTTTTTTTTTTTTTNNNNNNNNNNHHNNNNNNN","n":["CUSTOM_START","ERRNO_NOT_POSITIVE","Error","FAILED_RDRAND","INTERNAL_START","IOS_SEC_RANDOM","NODE_CRYPTO","NODE_ES_MODULE","NODE_RANDOM_FILL_SYNC","NO_RDRAND","UNEXPECTED","UNSUPPORTED","VXWORKS_RAND_SECURE","WEB_CRYPTO","WEB_GET_RANDOM_VALUES","WINDOWS_RTL_GEN_RANDOM","borrow","borrow_mut","clone","clone_into","code","eq","fmt","fmt","from","from","getrandom","getrandom_uninit","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"],[35,"core::num::nonzero"],[36,"core::fmt"],[37,"core::fmt"],[38,"core::mem::maybe_uninit"],[39,"core::option"],[40,"alloc::string"],[41,"core::any"]],"d":["Codes at or above this point can be used by users to …","The platform-specific <code>errno</code> returned a non-positive value.","A small and <code>no_std</code> compatible error type","RDRAND instruction failed due to a hardware issue.","Codes below this point represent OS Errors (i.e. positive …","Call to <code>CCRandomGenerateBytes</code> failed on iOS, tvOS, or …","Node.js does not have the <code>crypto</code> CommonJS module.","Called from an ES module on Node.js. This is unsupported, …","Calling Node.js function <code>crypto.randomFillSync</code> failed.","RDRAND instruction unsupported on this target.","Encountered an unexpected situation which should not …","This target/platform is not supported by <code>getrandom</code>.","On VxWorks, call to <code>randSecure</code> failed (random number …","The environment does not support the Web Crypto API.","Calling Web Crypto API <code>crypto.getRandomValues</code> failed.","Call to Windows <code>RtlGenRandom</code> failed.","","","","","Extract the bare error code.","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Version of the <code>getrandom</code> function which fills <code>dest</code> with …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1],"f":"````````````````{ce{}{}}0{bb}{{ce}d{}{}}{bf}{{bb}h}{{bj}l}0{fb}{cc{}}{{{A`{n}}}{{Ab{db}}}}{{{A`{{Ad{n}}}}}{{Ab{{A`{n}}b}}}}9{b{{Ah{Af}}}}:{cAj{}}{c{{Ab{e}}}{}{}}0{cAl{}}","c":[],"p":[[5,"Error",0],[1,"unit"],[8,"NonZeroU32",35],[1,"bool"],[5,"Formatter",36],[8,"Result",36],[1,"u8"],[1,"slice"],[6,"Result",37],[20,"MaybeUninit",38],[1,"i32"],[6,"Option",39],[5,"String",40],[5,"TypeId",41]],"b":[[22,"impl-Debug-for-Error"],[23,"impl-Display-for-Error"]]}],\
["ppv_lite86",{"doc":"","t":"KKKKKKKKKKRKKKKKKKKKKKKKMMQQQMMMMMMNNNNMMMMMMMMMMMMMMMMMMMMMMMMMKRKRKRKRKRKRKRKRKRKRMNNMMMNNEEEMMMCIIFFFFFFIIIFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNUUUNNNNNNNNNNNNNNN","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"],[269,"core::clone"],[270,"core::marker"],[271,"core::result"],[272,"core::any"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,0,4,6,7,4,6,18,18,18,18,18,32,32,32,32,32,32,33,32,32,34,34,34,35,35,35,36,36,36,36,36,36,36,7,37,38,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,0,18,40,18,18,41,31,31,18,18,0,0,0,42,31,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,57,58,59,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,57,58,58,59,54,56,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,58,59,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,57,0,0,0,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59],"f":"````````````````````````{{{d{}{{b{c}}}}{d{}{{b{c}}}}}c{}}{ff}```{{hj}c{}}{{lj}c{}}{cn{}}{{hcj}h{}}{{lcj}l{}}{{}{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}}BfBhBjBlBnC`CbCdCfCh}{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}{Cl{Cj}}}AgBfBhBjBlBnC`CbCdCfChCn}000{D`D`}00000{DbDb}11{DdDd}00{DfDf}00{DhDh}000000{nc{}}{Djc{}}{{DlDlDlDl}{{Dn{DlDlDlDl}}}}````````````````````{cE`{}}{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}Ag}AiBfBhBjBlBnC`CbCdCfCh{}{{E`{Ag}}}}0{cEb{}}{{{Cl{Cj}}}Cn}0{{{Bd{}{{A`{c}}{Ab{e}}{Ad{g}}{Af{i}}{Ah{k}}{Aj{m}}{Al{o}}{An{Aa}}{B`{Ac}}{Bb{Ae}}}}Ag}AiBfBhBjBlBnC`CbCdCfCh{}{{n{Ag}}}}0```{Edc{}}{{Cn{Cl{Cj}}}Ef}0``````````````````{ce{}{}}00000000000000000000000000000{EhEh}{EjEj}{ElEl}{EnEn}{F`F`}{FbFb}{FdFd}{FfFf}{FhFh}{FjFj}{{{Fl{ceg}}}{{Fl{ceg}}}FnFnFn}{{{G`{c}}}{{G`{c}}}Fn}{GbGb}{GdGd}{GfGf}{{}Gb}{{}Gd}{{}Gf}{{GbGb}Gh}{{GdGd}Gh}{{GfGf}Gh}{cc{}}00000000000{{{Gj{j}}}Gb}11{{{Gj{Gl}}}Gd}2{{}{{Fl{ceg}}}GnGnGn}{{}{{G`{c}}}Gn}{ce{}{}}00000000000000{{{Gj{Gb}}}Gd}{{{Gj{Gb}}}Gf}{Gd{{Gj{Gb}}}}{Gf{{Gj{Gb}}}}{c{{H`{e}}}{}{}}00000000000000000000000000000{cHb{}}00000000000000{GbGb}```777777777777777","c":[],"p":[[17,"Output"],[10,"AndNot",0],[10,"BSwap",0],[10,"Vec2",0],[1,"u32"],[10,"Vec4",0],[10,"MultiLane",0],[17,"u32x4"],[17,"u64x2"],[17,"u128x1"],[17,"u32x4x2"],[17,"u64x2x2"],[17,"u64x4"],[17,"u128x2"],[17,"u32x4x4"],[17,"u64x2x4"],[17,"u128x4"],[10,"Machine",0],[10,"u32x4",0],[10,"u64x2",0],[10,"u128x1",0],[10,"u32x4x2",0],[10,"u64x2x2",0],[10,"u64x4",0],[10,"u128x2",0],[10,"u32x4x4",0],[10,"u64x2x4",0],[10,"u128x4",0],[1,"u8"],[1,"slice"],[10,"StoreBytes",0],[10,"RotateEachWord32",0],[10,"RotateEachWord64",0],[10,"Words4",0],[10,"LaneWords4",0],[10,"Swap64",0],[10,"Vector",0],[10,"Vec4Ext",0],[1,"tuple"],[10,"Store",0],[10,"UnsafeFrom",0],[10,"VZip",0],[1,"unit"],[5,"YesS3",99],[5,"NoS3",99],[5,"YesS4",99],[5,"NoS4",99],[5,"YesA1",99],[5,"NoA1",99],[5,"YesA2",99],[5,"NoA2",99],[5,"YesNI",99],[5,"NoNI",99],[5,"SseMachine",99],[10,"Clone",269],[5,"Avx2Machine",99],[20,"vec128_storage",99],[20,"vec256_storage",99],[20,"vec512_storage",99],[1,"bool"],[1,"array"],[1,"u64"],[10,"Copy",270],[6,"Result",271],[5,"TypeId",272]],"b":[]}],\
["rand",{"doc":"Utilities for random number generation","t":"TKFKTKKRKNNNCNNMNNNNNNNMNNNNNNNNNNNNNMMCHNNCNNNNNCNNHNMNNMNNNNFFGFFKKPPPPFFPFFFKGFTMNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNPGPKKKRFFFFFKRMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEEEEEEEEEEEEEFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNKKKFKENNNNNNNNNNNNNNCNNNMNNMMNNNNNGGGNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNN","n":["CUSTOM_START","CryptoRng","Error","Fill","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","borrow","borrow_mut","code","distributions","fill","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen","gen_bool","gen_bool","gen_iter","gen_iter","gen_range","gen_range","gen_ratio","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read_adapter","rngs","sample","sample","sample_iter","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_string","try_fill","try_fill","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","Alphanumeric","Bernoulli","BernoulliError","DistIter","DistMap","DistString","Distribution","InsufficientNonZero","InvalidInput","InvalidProbability","InvalidWeight","Open01","OpenClosed01","Overflow","Slice","Standard","Uniform","Weight","WeightError","WeightedIndex","ZERO","append_string","append_string","append_string","append_string","append_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add_assign","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","map","map","new","new","new","next","num_choices","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","sample_iter","sample_string","sample_string","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","update_weights","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","EmptyRange","Error","NonFinite","SampleBorrow","SampleRange","SampleUniform","Sampler","Uniform","UniformChar","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","is_empty","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","sample_single_inclusive","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","CryptoRng","Distribution","IndexedMutRandom","IndexedRandom","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","OsRng","ReseedingRng","StdRng","ThreadRng","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","eq","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","from","from_rng","from_seed","into","into","into","into","mock","new","next_u32","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","next_u64","reseed","reseed","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","eq","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","IndexedMutRandom","IndexedRandom","IteratorRandom","SliceChooseIter","SliceRandom","WeightError","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","is_empty","len","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","sample_weighted","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[62,"rand::distributions"],[311,"rand::distributions::uniform"],[478,"rand::prelude"],[491,"rand::rngs"],[568,"rand::rngs::mock"],[587,"rand::seq"],[621,"rand::seq::index"],[674,"core::num::nonzero"],[675,"core::option"],[676,"core::marker"],[677,"core::fmt"],[678,"core::fmt"],[679,"getrandom::error"],[680,"core::default"],[681,"core::convert"],[682,"core::error"],[683,"alloc::boxed"],[684,"core::convert"],[685,"alloc::string"],[686,"core::any"],[687,"core::clone"],[688,"core::cmp"],[689,"core::cmp"],[690,"core::iter::traits::collect"],[691,"core::num::nonzero"],[692,"core::num::nonzero"],[693,"core::num::nonzero"],[694,"core::ops::range"],[695,"rand_core::block"],[696,"alloc::vec"],[697,"core::ops::index"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> …","Error type of random number generators","Types which may be filled with random data","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value via the <code>Standard</code> distribution.","Return a random value via the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Return a bool with a probability <code>p</code> of being true.","Generate values via an iterator","Generate values via an iterator","Generate a random value in the given range.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","Convert an <code>RngCore</code> to a <code>RngReadAdapter</code>.","Random number generators and adapters","Sample a new value, using the given distribution.","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Access the thread-local generator","","Fill self with random data","Fill any type implementing <code>Fill</code> with random data","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","Sample a <code>u8</code>, uniformly distributed over ASCII letters and …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","An iterator that generates random values of <code>T</code> with …","A distribution of values of type <code>S</code> derived from the …","<code>String</code> sampler","Types (distributions) that can be used to create a random …","Not enough non-zero weights are available to sample values","The input weight sequence is empty, too long, or wrongly …","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","A weight is negative, too large for the distribution, or …","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Overflow when calculating the sum of weights","A distribution to sample items uniformly from a slice.","A generic random value distribution, implemented for many …","Sample values uniformly between two bounds.","Bounds on a weight","Errors returned by weighted distributions","A distribution using weighted sampling of discrete items","Representation of 0","Append <code>len</code> random chars to <code>string</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checked addition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a distribution of values of ‘S’ by mapping the …","Create a distribution of values of ‘S’ by mapping the …","Construct a new <code>Bernoulli</code> with the given probability of …","Create a new <code>Slice</code> instance which samples uniformly from …","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","Returns the count of choices in this distribution","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates random values of <code>T</code>, …","Generate a <code>String</code> of <code>len</code> random chars","Generate a <code>String</code> of <code>len</code> random chars","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","Update a subset of weights, without changing the number of …","","","","","","","","","","","","","<code>low &gt; high</code>, or equal in case of exclusive range.","Error type returned from <code>Uniform::new</code> and <code>new_inclusive</code>.","Input or range <code>high - low</code> is non-finite. Not relevant to …","Helper trait similar to <code>Borrow</code> but implemented only for …","Range that supports generating a single sample efficiently.","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>char</code>.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Check whether the range is empty.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance, which samples uniformly …","","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance, which samples uniformly …","","","","","","","","","","","","","","","","","Sample a value.","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","Sample from distribution, Lemire’s method, unbiased","","","","","Generate a sample from the given range.","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","Sample single value, Canon’s method, biased","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A random number generator that retrieves randomness from …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","","","","","Immediately reseed the generator","Immediately reseed the generator","","","","","","","","","","","","","","","","","","","","","","","","","A mock generator yielding very predictable output","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","Extension trait on indexable lists, providing random …","Extension trait on indexable lists, providing random …","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing shuffling methods.","","","","Uniformly sample one element","Uniformly sample one element","Uniformly sample <code>amount</code> distinct elements","Uniformly sample <code>amount</code> distinct elements into a <code>Vec</code>","Uniformly sample <code>amount</code> distinct elements into a buffer","Biased sampling of <code>amount</code> distinct elements","Uniformly sample one element (mut)","Uniformly sample one element (stable)","Biased sampling for one element","Biased sampling for one element (mut)","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","True when the length is zero","The length","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[1,0,0,0,1,0,0,17,0,1,1,1,0,5,5,9,1,1,1,1,1,17,17,17,5,5,5,5,5,5,5,5,5,5,1,1,1,9,9,0,0,1,9,0,5,5,5,5,17,0,1,1,0,1,7,5,5,9,1,1,1,1,0,0,0,0,0,0,0,50,50,44,50,0,0,50,0,0,0,0,0,0,42,36,38,40,41,22,43,44,23,54,45,46,38,40,48,50,41,22,43,44,23,54,45,46,38,40,48,50,41,22,42,43,44,45,46,38,40,48,50,41,22,43,44,45,46,38,40,48,50,41,22,43,44,48,50,41,43,44,44,23,54,45,46,38,40,48,50,50,41,22,43,44,23,54,45,46,38,40,48,50,41,22,43,43,44,23,54,45,46,38,40,48,50,41,22,23,32,32,43,40,48,23,40,32,43,54,45,45,46,46,38,40,48,41,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,32,32,36,36,23,43,44,45,46,38,40,48,50,41,22,44,50,43,44,23,54,45,46,38,40,48,50,41,41,41,22,43,44,23,54,45,46,38,40,48,50,41,22,43,44,23,54,45,46,38,40,48,50,41,22,0,48,43,44,23,54,45,46,38,40,48,50,41,22,84,0,84,0,0,0,24,0,0,0,0,0,0,92,86,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,84,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,25,92,41,87,87,87,87,87,87,87,87,87,87,87,87,88,89,89,90,92,41,87,87,87,87,87,87,87,87,87,87,87,87,88,89,89,90,92,87,87,87,87,87,87,87,87,87,87,87,87,88,89,89,90,25,92,87,87,87,87,87,87,87,87,87,87,87,87,89,89,92,87,87,87,87,87,87,87,87,87,87,87,87,89,89,84,87,88,89,90,84,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,84,87,88,89,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,95,97,33,94,95,97,33,94,95,97,33,94,95,97,33,94,33,97,94,95,97,33,94,95,97,33,94,95,97,33,97,97,94,95,97,33,0,95,94,95,97,33,94,95,97,33,95,33,94,95,97,33,94,95,97,33,94,95,97,33,94,95,97,33,94,95,97,33,94,95,97,33,0,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,0,0,0,0,0,0,102,102,100,101,100,101,101,100,104,101,100,104,102,102,0,102,102,100,100,102,102,106,106,102,102,102,102,102,0,0,0,107,109,108,107,109,108,107,108,107,108,107,107,109,108,107,107,107,109,108,107,107,109,108,107,109,108,107,107,107,107,109,108,0,0,109,108,107,108,107,109,108,107,109,108,107,109,108,107,109,108],"f":"`````````{ce{}{}}0{b{{h{{f{d}}}}}}`{{jc}l{nA`}}0{{Ab{Af{Ad}}}l}{{bAh}{{Al{lAj}}}}0{{{f{d}}}b}{Anb}{cc{}}{{}{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}{c{{Al{{Bb{}{{B`{e}}}}b}}}Ab{A`Bd{Bf{{Af{Ad}}}}}}{c{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}{jc{}}0{{jBh}Bj}0{j{{Bn{Bljc}}}{}}0{{je}cC`{{Cb{c}}}}0{{jdd}Bj}0{bCd}{ce{}{}}{cb{{Ch{{Cf{Cd}}}}}}{Abd}{AbCj}`{{}c{}}{b{{h{Cl}}}}{Ab{{Cn{Ab}}}}`{{je}c{}{{D`{c}}}}0{{je}{{Bn{ejc}}}{}{{D`{c}}}}0{Cj{{Bb{}{{B`{c}}}}}{A`Bd{Bf{{Af{Ad}}}}}}`{b{{h{Cd}}}}{b{{Cf{Cd}}}}{{}Db}{cDd{}}{{nc}{{Al{lb}}}{jA`}}{{jc}{{Al{lb}}}{nA`}}0{{Ab{Af{Ad}}}{{Al{lb}}}}{c{{Al{e}}}{}{}}0{cDf{}}{ce{}{}}`````````````````````{{DhcDdDj}l{jA`}}{{DlcDdDj}l{jA`}}{{{E`{Dn}}cDdDj}l{jA`}}{{{Eb{Dn}}cDdDj}l{jA`}}{{BlcDdDj}l{jA`}}555555555555555555555555{{EdEd}{{Al{ll}}}}{EfEf}{EhEh}{EjEj}{ElEl}{DlDl}{{{E`{c}}}{{E`{c}}}En}{{{F`{c}}}{{F`{c}}}{EnC`Fb}}{FdFd}{{{Eb{c}}}{{Eb{c}}}{EnC`}}{BlBl}{{ce}l{}{}}000000000{{EfEf}Bj}{{EhEh}Bj}{{{F`{c}}{F`{c}}}Bj{FfC`Fb}}{{FdFd}Bj}{{{Eb{c}}{Eb{c}}}Bj{FfC`}}{{EfAh}Fh}{{EhAh}Fh}0{{{Bn{ceg}}Ah}FhFjFjFj}{{{Fl{cegi}}Ah}FhFjFjFjFj}{{EjAh}Fh}{{ElAh}Fh}{{DlAh}Fh}{{{E`{c}}Ah}FhFj}{{{F`{c}}Ah}Fh{FjC`Fb}}{{FdAh}Fh}0{{{Eb{c}}Ah}Fh{FjC`}}{{BlAh}Fh}{cc{}}00000000000{{dd}{{Al{EfEh}}}}{ce{}{}}000000000000{{D`g}{{Fl{D`gce}}}{}{}{{G`{c}{{Fn{e}}}}}}0{Bh{{Al{EfEh}}}}{{{Af{c}}}{{Al{{E`{c}}`}}}{}}{c{{Al{{F`{e}}Fd}}}Gb{EdC`Fb}}{{{Bn{egc}}}{{h{c}}}{}{{D`{c}}}j}{{{E`{c}}}Gd{}}{{D`c}e{jA`}{}}{{Efc}Bj{jA`}}{{{Fl{eicg}}k}g{}{{D`{c}}}{}{{G`{c}{{Fn{g}}}}}{jA`}}{{Ejc}Gf{jA`}}{{Ejc}Bh{jA`}}{{Elc}Gf{jA`}}{{Elc}Bh{jA`}}{{Dlc}Ad{jA`}}{{{E`{c}}e}c{}{jA`}}{{{F`{c}}e}Dj{C`Fb}{jA`}}{{{Eb{c}}e}cC`{jA`}}{{Blc}Gh{jA`}}{{Blc}Gj{jA`}}{{Blc}{{Gl{egi}}}{jA`}{}{}{}}{{Blc}Gd{jA`}}{{Blc}Gn{jA`}}{{Blc}Dn{jA`}}{{Blc}l{jA`}}{{Blc}H`{jA`}}{{Blc}Hb{jA`}}{{Blc}{{Gl{egikmoAaAcAeAg}}}{jA`}{}{}{}{}{}{}{}{}{}{}}{{Blc}Hd{jA`}}{{Blc}{{Gl{egik}}}{jA`}{}{}{}{}}{{Blc}Hf{jA`}}{{Blc}{{Gl{egikmoAa}}}{jA`}{}{}{}{}{}{}{}}{{Blc}Hh{jA`}}{{Blc}{{Gl{egikmoAaAcAeAgAi}}}{jA`}{}{}{}{}{}{}{}{}{}{}{}}{{Blc}d{jA`}}{{Blc}{{Hj{e}}}{jA`}{}}{{Blc}Hl{jA`}}{{Blc}{{Gl{e}}}{jA`}{}}{{Blc}Hn{jA`}}{{Blc}I`{jA`}}{{Blc}Ib{jA`}}{{Blc}{{Id{e}}}{jA`}{}}{{Blc}{{Gl{egikm}}}{jA`}{}{}{}{}{}}{{Blc}Cj{jA`}}{{Blc}Dj{jA`}}{{Blc}If{jA`}}{{Blc}Ih{jA`}}{{Blc}Ij{jA`}}{{Blc}Il{jA`}}{{Blc}{{h{e}}}{jA`}{}}{{Blc}{{Gl{egikmo}}}{jA`}{}{}{}{}{}{}}{{Blc}In{jA`}}{{Blc}{{Gl{egikmoAaAcAeAgAiAk}}}{jA`}{}{}{}{}{}{}{}{}{}{}{}{}}{{Blc}Gf{jA`}}{{Blc}Ad{jA`}}{{Blc}J`{jA`}}{{Blc}{{Gl{eg}}}{jA`}{}{}}{{Blc}{{Gl{egikmoAaAcAe}}}{jA`}{}{}{}{}{}{}{}{}{}}{{Blc}Bj{jA`}}{{Blc}Bh{jA`}}{{Blc}Jb{jA`}}{{Blc}{{Gl{egikmoAaAc}}}{jA`}{}{}{}{}{}{}{}{}}{{Blc}Cl{jA`}}{{Blc}Jd{jA`}}{{D`c}{{Bn{D`ce}}}j{}}0{{DhcDj}Dd{jA`}}0{{{Bn{egc}}}{{Gl{Dj{h{Dj}}}}}{}{{D`{c}}}j}{ce{}{}}000000000{cDd{}}0{c{{Al{e}}}{}{}}000000000{{{Jf{c}}}{{Al{{Eb{c}}Jh}}}C`}{{{Jj{c}}}{{Al{{Eb{c}}Jh}}}C`}22222222222222{cDf{}}00000000000`{{{F`{c}}{Af{{Gl{Djc}}}}}{{Al{lFd}}}{}}666666666666``````````````{Jlc{}}7777777777{JhJh}{{{Jn{c}}}{{Jn{c}}}En}{K`K`}{{{Kb{c}}}{{Kb{c}}}En}{KdKd}{{ce}l{}{}}0000{{JhJh}Bj}{{{Jn{c}}{Jn{c}}}BjFf}{{K`K`}Bj}{{{Kb{c}}{Kb{c}}}BjFf}{{KdKd}Bj}{{JhAh}Fh}0{{{Jn{c}}Ah}FhFj}{{K`Ah}Fh}{{{Kb{c}}Ah}FhFj}{{KdAh}Fh}{cc{}}0000{ce{}{}}0000{CbBj}{{eg}{{Al{{Kh{}{{Kf{c}}}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Eb{c}}Jh}}}C`{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{d}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Hb}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Cl}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Hl}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Gh}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Cj}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Dj}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{I`}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Ad}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Hf}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Ib}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Jn{Hd}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{K`Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Kb{Bh}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Kb{Gf}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{KdJh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Kh{}{{Kf{c}}}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}{{eg}{{Al{{Eb{c}}Jh}}}C`{{Jl{c}}A`}{{Jl{c}}A`}}<6?8>{{eg}{{Al{{Jn{d}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}8{{eg}{{Al{{Jn{Hb}}Jh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}}?;<=7654{{{Kh{}{{Kf{c}}}}e}c{}{jA`}}{{{Jn{Dj}}c}e{jA`}{}}{{{Jn{Cj}}c}e{jA`}{}}{{{Jn{I`}}c}e{jA`}{}}{{{Jn{Hb}}c}e{jA`}{}}{{{Jn{Gh}}c}e{jA`}{}}{{{Jn{Hd}}c}e{jA`}{}}{{{Jn{Ad}}c}e{jA`}{}}{{{Jn{Ib}}c}e{jA`}{}}{{{Jn{Hl}}c}e{jA`}{}}{{{Jn{Hf}}c}e{jA`}{}}{{{Jn{d}}c}e{jA`}{}}{{{Jn{Cl}}c}e{jA`}{}}{{K`c}e{jA`}{}}{{{Kb{Gf}}c}e{jA`}{}}{{{Kb{Bh}}c}e{jA`}{}}{{Kdc}Kj{jA`}}{{Cbc}{{Al{eJh}}}{AbA`}{}}{{egi}{{Al{cJh}}}{}{{Jl{c}}A`}{{Jl{c}}A`}{jA`}}00000000000000000000000000000{ce{}{}}0000{cDd{}}{c{{Al{e}}}{}{}}000000000{cDf{}}000033333`````````````````33333333{KlKl}{{{Kn{ce}}}{{Kn{ce}}}{L`BbEn}{AbEn}}{LbLb}{DbDb}{{ce}l{}{}}000{{}Kl}{{}Db}{{LbLb}Bj}{{Kl{Af{Ad}}}l}{{{Kn{ce}}{Af{Ad}}}l{{L`{}{{Ld{d}}}}Bb}Ab}{{Lb{Af{Ad}}}l}{{Db{Af{Ad}}}l}{{KlAh}{{Al{lAj}}}}{{{Kn{ce}}Ah}Fh{L`BbFj}{AbFj}}{{LbAh}Fh}{{DbAh}Fh}{cc{}}000{c{{Al{Lbb}}}Ab}{cLb{}}{ce{}{}}000`{{cCje}{{Kn{ce}}}{L`Bb}Ab}{Kld}{{{Kn{ce}}}d{{L`{}{{Ld{d}}}}Bb}Ab}{Lbd}{Dbd}{KlCj}{{{Kn{ce}}}Cj{{L`{}{{Ld{d}}}}Bb}Ab}{LbCj}{DbCj}{{{Kn{ce}}}{{Al{lb}}}{L`Bb}Ab}{Db{{Al{lb}}}};;;;{{Kl{Af{Ad}}}{{Al{lb}}}}{{{Kn{ce}}{Af{Ad}}}{{Al{lb}}}{{L`{}{{Ld{d}}}}Bb}Ab}{{Lb{Af{Ad}}}{{Al{lb}}}}{{Db{Af{Ad}}}{{Al{lb}}}}{c{{Al{e}}}{}{}}0000000{cDf{}}000{ce{}{}}000`00{LfLf}{{ce}l{}{}}{{LfLf}Bj}{{Lf{Af{Ad}}}l}{{LfAh}Fh}{cc{}}6{{CjCj}Lf}{Lfd}{LfCj}9{{Lf{Af{Ad}}}{{Al{lb}}}}<<;:``````::{{Lhc}{{h{e}}}{jA`}{}}{{Ljc}{{h{e}}}{jA`}{}}{{LhcDj}{{Ll{Lhe}}}{jA`}{}}{{LjcDj}{{Ln{e}}}{jA`}{}}{{Ljc{Af{e}}}Dj{jA`}{}}{{LhcDji}{{Al{{Ll{Lhe}}Fd}}}{jA`}{}{{Ch{Bh}}}{{G`{e}{{Fn{g}}}}}}{{M`c}{{h{e}}}{jA`}{}}5{{Lhck}{{Al{eFd}}}{jA`}{}{}{{Jl{g}}}{{G`{e}{{Fn{i}}}}}}{{M`ck}{{Al{eFd}}}{jA`}{}{}{{Jl{g}}}{{G`{e}{{Fn{i}}}}}}{{{Ll{ce}}Ah}Fh{FjA`}Fj}>`{ce{}{}}0{LhBj}{LhDj}{{{Ll{ec}}}Dj{}{{Mb{Dj}{{Fn{c}}}}A`}}{{{Ll{ec}}}{{h{g}}}{}{{Mb{Dj}{{Fn{c}}}}A`}{}}{{MdcDj}{{Gl{{Af{e}}{Af{e}}}}}{jA`}{}}{{Mdc}l{jA`}}{{{Ll{ec}}}{{Gl{Dj{h{Dj}}}}}{}{{Mb{Dj}{{Fn{c}}}}A`}}{c{{Al{e}}}{}{}}0{cDf{}}9```999999{MfMf}{MhMh}{{ce}l{}{}}0{{MfMf}Bj}{{MfAh}Fh}{{MjAh}Fh}{{MhAh}Fh}{{{Ln{Dj}}}Mf}{{{Ln{d}}}Mf}{cc{}}00{{MfDj}Dj}{ce{}{}}00{MfMh}11{Mf{{Ln{Dj}}}}{MfBj}{MfMj}{MfDj}{Mj{{h{Dj}}}}{Mh{{h{c}}}{}}{{cDjDj}Mf{jA`}}{{cDjgDj}{{Al{MfFd}}}{jA`}{{Ch{Bh}}}{{G`{Dj}{{Fn{e}}}}}}{Mj{{Gl{Dj{h{Dj}}}}}}{Mh{{Gl{Dj{h{Dj}}}}}};;{c{{Al{e}}}{}{}}00000{cDf{}}00===","c":[],"p":[[5,"Error",0],[1,"u32"],[5,"NonZero",674],[6,"Option",675],[10,"Rng",0],[1,"unit"],[10,"Fill",0],[10,"Sized",676],[10,"RngCore",0],[1,"u8"],[1,"slice"],[5,"Formatter",677],[5,"Error",677],[6,"Result",678],[5,"Error",679],[17,"Seed"],[10,"SeedableRng",0],[10,"Default",680],[10,"AsMut",681],[1,"f64"],[1,"bool"],[5,"Standard",62],[5,"DistIter",62],[10,"SampleUniform",311],[10,"SampleRange",311],[10,"Error",682],[5,"Box",683],[10,"Into",681],[1,"u64"],[1,"i32"],[5,"RngReadAdapter",684],[10,"Distribution",62],[5,"ThreadRng",491],[5,"String",685],[5,"TypeId",686],[10,"DistString",62],[1,"usize"],[5,"Alphanumeric",62],[1,"char"],[5,"Slice",62],[5,"Uniform",62],[10,"Weight",62],[5,"Bernoulli",62],[6,"BernoulliError",62],[5,"OpenClosed01",62],[5,"Open01",62],[10,"Clone",687],[5,"WeightedIndex",62],[10,"PartialOrd",688],[6,"WeightError",62],[10,"PartialEq",688],[8,"Result",677],[10,"Debug",677],[5,"DistMap",62],[17,"Output"],[10,"Fn",689],[10,"IntoIterator",690],[8,"NonZeroUsize",674],[1,"f32"],[1,"i8"],[8,"NonZeroI128",674],[1,"tuple"],[8,"NonZeroU16",674],[8,"NonZeroU128",674],[1,"i16"],[1,"i64"],[1,"i128"],[5,"__m256i",691],[1,"array"],[1,"u16"],[8,"NonZeroI16",674],[1,"u128"],[1,"isize"],[5,"Wrapping",692],[8,"NonZeroI64",674],[8,"NonZeroU64",674],[8,"NonZeroIsize",674],[8,"NonZeroI32",674],[5,"__m128i",691],[8,"NonZeroU8",674],[8,"NonZeroI8",674],[8,"NonZeroU32",674],[5,"Range",693],[6,"Error",311],[5,"RangeInclusive",693],[10,"SampleBorrow",311],[5,"UniformInt",311],[5,"UniformChar",311],[5,"UniformFloat",311],[5,"UniformDuration",311],[17,"X"],[10,"UniformSampler",311],[5,"Duration",694],[5,"OsRng",491],[5,"ReseedingRng",491],[10,"BlockRngCore",695],[5,"StdRng",491],[17,"Item"],[5,"StepRng",568],[10,"IndexedRandom",587],[10,"IteratorRandom",587],[5,"SliceChooseIter",587],[5,"Vec",696],[10,"IndexedMutRandom",587],[10,"Index",697],[10,"SliceRandom",587],[6,"IndexVec",621],[6,"IndexVecIntoIter",621],[6,"IndexVecIter",621]],"b":[[16,"impl-Display-for-Error"],[17,"impl-Debug-for-Error"],[18,"impl-From%3CNonZero%3Cu32%3E%3E-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[139,"impl-Display-for-BernoulliError"],[140,"impl-Debug-for-BernoulliError"],[148,"impl-Display-for-WeightError"],[149,"impl-Debug-for-WeightError"],[188,"impl-Distribution%3Cf32%3E-for-OpenClosed01"],[189,"impl-Distribution%3Cf64%3E-for-OpenClosed01"],[190,"impl-Distribution%3Cf32%3E-for-Open01"],[191,"impl-Distribution%3Cf64%3E-for-Open01"],[196,"impl-Distribution%3Ci8%3E-for-Standard"],[197,"impl-Distribution%3CNonZero%3Ci128%3E%3E-for-Standard"],[198,"impl-Distribution%3C(A,+B,+C)%3E-for-Standard"],[199,"impl-Distribution%3CNonZero%3Cusize%3E%3E-for-Standard"],[200,"impl-Distribution%3CNonZero%3Cu16%3E%3E-for-Standard"],[201,"impl-Distribution%3Cchar%3E-for-Standard"],[202,"impl-Distribution%3C()%3E-for-Standard"],[203,"impl-Distribution%3CNonZero%3Cu128%3E%3E-for-Standard"],[204,"impl-Distribution%3Ci16%3E-for-Standard"],[205,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J)%3E-for-Standard"],[206,"impl-Distribution%3Ci64%3E-for-Standard"],[207,"impl-Distribution%3C(A,+B,+C,+D)%3E-for-Standard"],[208,"impl-Distribution%3Ci128%3E-for-Standard"],[209,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G)%3E-for-Standard"],[210,"impl-Distribution%3C__m256i%3E-for-Standard"],[211,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K)%3E-for-Standard"],[212,"impl-Distribution%3Cu32%3E-for-Standard"],[213,"impl-Distribution%3C%5BT;+N%5D%3E-for-Standard"],[214,"impl-Distribution%3Cu16%3E-for-Standard"],[215,"impl-Distribution%3C(A,)%3E-for-Standard"],[216,"impl-Distribution%3CNonZero%3Ci16%3E%3E-for-Standard"],[217,"impl-Distribution%3Cu128%3E-for-Standard"],[218,"impl-Distribution%3Cisize%3E-for-Standard"],[219,"impl-Distribution%3CWrapping%3CT%3E%3E-for-Standard"],[220,"impl-Distribution%3C(A,+B,+C,+D,+E)%3E-for-Standard"],[221,"impl-Distribution%3Cu64%3E-for-Standard"],[222,"impl-Distribution%3Cusize%3E-for-Standard"],[223,"impl-Distribution%3CNonZero%3Ci64%3E%3E-for-Standard"],[224,"impl-Distribution%3CNonZero%3Cu64%3E%3E-for-Standard"],[225,"impl-Distribution%3CNonZero%3Cisize%3E%3E-for-Standard"],[226,"impl-Distribution%3CNonZero%3Ci32%3E%3E-for-Standard"],[227,"impl-Distribution%3COption%3CT%3E%3E-for-Standard"],[228,"impl-Distribution%3C(A,+B,+C,+D,+E,+F)%3E-for-Standard"],[229,"impl-Distribution%3C__m128i%3E-for-Standard"],[230,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I,+J,+K,+L)%3E-for-Standard"],[231,"impl-Distribution%3Cf32%3E-for-Standard"],[232,"impl-Distribution%3Cu8%3E-for-Standard"],[233,"impl-Distribution%3CNonZero%3Cu8%3E%3E-for-Standard"],[234,"impl-Distribution%3C(A,+B)%3E-for-Standard"],[235,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H,+I)%3E-for-Standard"],[236,"impl-Distribution%3Cbool%3E-for-Standard"],[237,"impl-Distribution%3Cf64%3E-for-Standard"],[238,"impl-Distribution%3CNonZero%3Ci8%3E%3E-for-Standard"],[239,"impl-Distribution%3C(A,+B,+C,+D,+E,+F,+G,+H)%3E-for-Standard"],[240,"impl-Distribution%3Ci32%3E-for-Standard"],[241,"impl-Distribution%3CNonZero%3Cu32%3E%3E-for-Standard"],[269,"impl-TryFrom%3CRange%3CX%3E%3E-for-Uniform%3CX%3E"],[270,"impl-TryFrom%3CRangeInclusive%3CX%3E%3E-for-Uniform%3CX%3E"],[351,"impl-Debug-for-Error"],[352,"impl-Display-for-Error"],[370,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[371,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[372,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[373,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[374,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[375,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[376,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[377,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[378,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[379,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[380,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[381,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[383,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[384,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[388,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[389,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[390,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[391,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[392,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[393,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[394,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[395,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[396,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[397,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[398,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[399,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[401,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[402,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[405,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[406,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[407,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[408,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[409,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[410,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[411,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[412,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[413,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[414,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[415,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[416,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[418,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[419,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[423,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[424,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[425,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[426,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[427,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[428,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[429,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[430,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[431,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[432,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[433,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[434,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[435,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[436,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[438,"impl-UniformSampler-for-UniformInt%3Cu16%3E"],[439,"impl-UniformSampler-for-UniformInt%3Cusize%3E"],[440,"impl-UniformSampler-for-UniformInt%3Cu128%3E"],[441,"impl-UniformSampler-for-UniformInt%3Ci32%3E"],[442,"impl-UniformSampler-for-UniformInt%3Cu32%3E"],[443,"impl-UniformSampler-for-UniformInt%3Ci16%3E"],[444,"impl-UniformSampler-for-UniformInt%3Ci128%3E"],[445,"impl-UniformSampler-for-UniformInt%3Ci8%3E"],[446,"impl-UniformSampler-for-UniformInt%3Cisize%3E"],[447,"impl-UniformSampler-for-UniformInt%3Cu8%3E"],[448,"impl-UniformSampler-for-UniformInt%3Cu64%3E"],[449,"impl-UniformSampler-for-UniformInt%3Ci64%3E"],[450,"impl-UniformSampler-for-UniformFloat%3Cf32%3E"],[451,"impl-UniformSampler-for-UniformFloat%3Cf64%3E"],[638,"impl-From%3CVec%3Cusize%3E%3E-for-IndexVec"],[639,"impl-From%3CVec%3Cu32%3E%3E-for-IndexVec"]]}],\
["rand_chacha",{"doc":"The ChaCha random number generator.","t":"FFFFFFIINNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_seed","get_seed","get_seed","get_stream","get_stream","get_stream","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"],[126,"core::fmt"],[127,"core::fmt"],[128,"core::result"],[129,"core::any"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the seed.","Get the seed.","Get the seed.","Get the stream number.","Get the stream number.","Get the stream number.","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,2,4,6,0,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":"````````{ce{}{}}00000000000{bb}{dd}{ff}{hh}{jj}{ll}{{ce}n{}{}}00000{{bb}A`}{{dd}A`}{{ff}A`}{{hh}A`}{{jj}A`}{{ll}A`}{{d{Ad{Ab}}}n}{{h{Ad{Ab}}}n}{{l{Ad{Ab}}}n}{{bAf}Ah}{{dAf}Ah}{{fAf}Ah}{{hAf}Ah}{{jAf}Ah}{{lAf}Ah}{cc{}}0{bd}11{fh}22{jl}{cb{}}{cd{}}{cf{}}{ch{}}{cj{}}{cl{}}{{bc}n{}}{{fc}n{}}{{jc}n{}}{d{{Aj{Ab}}}}{h{{Aj{Ab}}}}{l{{Aj{Ab}}}}{dAl}{hAl}{lAl}{dAn}{hAn}{lAn}{ce{}{}}00000{dB`}{hB`}{lB`}987`{{dAl}n}{{hAl}n}{{lAl}n}{{dAn}n}{{hAn}n}{{lAn}n}999999{{d{Ad{Ab}}}{{Bd{nBb}}}}{{h{Ad{Ab}}}{{Bd{nBb}}}}{{l{Ad{Ab}}}{{Bd{nBb}}}}{c{{Bd{e}}}{}{}}00000000000{cBf{}}00000>>>>>>","c":[],"p":[[5,"ChaCha20Core",0],[5,"ChaCha20Rng",0],[5,"ChaCha12Core",0],[5,"ChaCha12Rng",0],[5,"ChaCha8Core",0],[5,"ChaCha8Rng",0],[1,"unit"],[1,"bool"],[1,"u8"],[1,"slice"],[5,"Formatter",126],[8,"Result",126],[1,"array"],[1,"u64"],[1,"u128"],[1,"u32"],[5,"Error",127],[6,"Result",128],[5,"TypeId",129]],"b":[]}],\
["rand_core",{"doc":"Random number generation traits","t":"TKFTFKFRKCNNNNNNNNNNMNNNNNNNNNNNNMCNNNNCNMNMNNNNNNNNNMNNNNNNNNNNFFKKRRNNNNNNNNOONNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHH","n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","RngReadAdapter","Seed","SeedableRng","block","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","read_adapter","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","CryptoBlockRng","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[64,"rand_core::block"],[117,"rand_core::impls"],[123,"rand_core::le"],[125,"core::num::nonzero"],[126,"core::option"],[127,"core::fmt"],[128,"core::fmt"],[129,"getrandom::error"],[130,"core::default"],[131,"core::convert"],[132,"core::result"],[133,"core::error"],[134,"alloc::boxed"],[135,"core::convert"],[136,"alloc::string"],[137,"core::any"],[138,"core::clone"],[139,"core::fmt"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Adapter that enables reading through a <code>io::Read</code> from a …","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Convert an <code>RngCore</code> to a <code>RngReadAdapter</code>.","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","A marker trait used to indicate that an <code>RngCore</code> …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>."],"i":[3,0,0,3,0,0,0,15,0,0,3,11,1,3,11,1,1,1,3,1,6,1,3,3,11,1,3,3,3,11,1,15,15,15,0,3,3,11,1,0,3,6,1,6,1,3,11,6,15,3,3,1,3,6,1,3,11,1,3,11,1,3,11,1,0,0,0,0,31,31,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,31,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,29,32,0,0,0,0,0,0,0,0],"f":"``````````{ce{}{}}00000{bb}{{ce}d{}{}}{f{{j{h}}}}{{}b}{{l{A`{n}}}d}{{b{A`{n}}}d}{{fAb}Ad}0{{{Af{c}}Ab}Ad{lAh}}{{bAb}Ad}{hf}{cc{}}{Ajf}11{{}{{An{}{{Al{c}}}}}{AhB`{Bb{{A`{n}}}}}}{c{{Bd{{An{}{{Al{e}}}}f}}}l{AhB`{Bb{{A`{n}}}}}}{c{{An{}{{Al{c}}}}}{AhB`{Bb{{A`{n}}}}}}`{fBf}{ce{}{}}00`{cf{{Bj{{Bh{Bf}}}}}}{lBl}{bBl}{lBn}{bBn}{f{{j{C`}}}}{{{Af{c}}{A`{n}}}{{Bd{CbCd}}}{lAh}}{l{{Af{l}}}}{Bn{{An{}{{Al{c}}}}}{AhB`{Bb{{A`{n}}}}}}{f{{j{Bf}}}}{f{{Bh{Bf}}}};{cCf{}}{{l{A`{n}}}{{Bd{df}}}}{{b{A`{n}}}{{Bd{df}}}}{c{{Bd{e}}}{}{}}00000{cCh{}}00``````{ce{}{}}000{{{Cj{c}}}{{Cj{c}}}{ClCnAh}}{{{D`{c}}}{{D`{c}}}{ClCnAh}}{{ce}d{}{}}0``{{{Cj{c}}{A`{n}}}d{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}{A`{n}}}d{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}Ab}Ad{CnDd}}{{{D`{c}}Ab}Ad{CnDd}}{cc{}}0{c{{Bd{{Cj{e}}f}}}l{CnAn}}{c{{Bd{{D`{e}}f}}}l{CnAn}}{c{{Cj{e}}}{}{CnAn}}{c{{D`{e}}}{}{CnAn}}{{{Cn{}{{Db{c}}{Df{e}}}}e}d{}{{Dh{{A`{c}}}}{Bb{{A`{c}}}}B`}}{{{Cj{c}}Cb}dCn}{{{D`{c}}Cb}dCn}{{{Cj{c}}}CbCn}{{{D`{c}}}CbCn}{ce{}{}}0{c{{Cj{c}}}Cn}{c{{D`{c}}}Cn}{{{Cj{c}}}Bl{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}}Bl{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}}Bn{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}}Bn{{Cn{}{{Db{Bn}}}}}}{{{Cj{c}}}dCn}{{{D`{c}}}dCn}{Bn{{Cj{c}}}{CnAn}}{Bn{{D`{c}}}{CnAn}}::{{{Cj{c}}{A`{n}}}{{Bd{df}}}{{Cn{}{{Db{Bl}}}}}}{{{D`{c}}{A`{n}}}{{Bd{df}}}{{Cn{}{{Db{Bn}}}}}}{c{{Bd{e}}}{}{}}000{cCh{}}0{{c{A`{n}}}d{lAh}}{{{A`{Bl}}{A`{n}}}{{Dj{CbCb}}}}{{{A`{Bn}}{A`{n}}}{{Dj{CbCb}}}}{cBl{lAh}}{cBn{lAh}}0{{{A`{n}}{A`{Bl}}}d}{{{A`{n}}{A`{Bn}}}d}","c":[],"p":[[5,"OsRng",0],[1,"unit"],[5,"Error",0],[8,"NonZeroU32",125],[6,"Option",126],[10,"RngCore",0],[1,"u8"],[1,"slice"],[5,"Formatter",127],[8,"Result",127],[5,"RngReadAdapter",0],[10,"Sized",128],[5,"Error",129],[17,"Seed"],[10,"SeedableRng",0],[10,"Default",130],[10,"AsMut",131],[6,"Result",132],[10,"Error",133],[5,"Box",134],[10,"Into",131],[1,"u32"],[1,"u64"],[1,"i32"],[1,"usize"],[5,"Error",135],[5,"String",136],[5,"TypeId",137],[5,"BlockRng",64],[10,"Clone",138],[10,"BlockRngCore",64],[5,"BlockRng64",64],[17,"Item"],[10,"Debug",127],[17,"Results"],[10,"AsRef",131],[1,"tuple"]],"b":[[22,"impl-Display-for-Error"],[23,"impl-Debug-for-Error"],[26,"impl-From%3CNonZero%3Cu32%3E%3E-for-Error"],[28,"impl-From%3CError%3E-for-Error"]]}],\
["zerocopy",{"doc":"<em>Need more out of zerocopy? Submit a customer request issue!</em>","t":"KKKKKKKKKFKFKNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNQNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMQQQNNNNNNNNNNNNNNNNNIGKFFFFFFFIGTTTTTIIFFFFFTTTTTTTTTTTTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII","n":["ByteSlice","ByteSliceMut","FromBytes","FromZeros","IntoByteSlice","IntoByteSliceMut","IntoBytes","KnownLayout","NoCell","Ref","TryFromBytes","Unalign","Unaligned","as_bytes","as_mut_bytes","as_mut_ptr","as_ptr","borrow","borrow","borrow_mut","borrow_mut","byteorder","bytes","bytes_mut","clone","cmp","cmp","default","deref","deref","deref_mut","deref_mut","deref_mut_unchecked","deref_unchecked","eq","eq","fmt","fmt","fmt","fmt","from","from","get","get_mut_ptr","get_ptr","hash","include_value","into","into","into_inner","into_mut","into_ref","mut_from","mut_from_prefix","mut_from_suffix","mut_slice_from","mut_slice_from_prefix","mut_slice_from_suffix","new","new","new_from_prefix","new_from_prefix_zeroed","new_from_suffix","new_from_suffix_zeroed","new_slice_from_prefix","new_slice_from_prefix_zeroed","new_slice_from_suffix","new_slice_from_suffix_zeroed","new_slice_unaligned","new_slice_unaligned_from_prefix","new_slice_unaligned_from_prefix_zeroed","new_slice_unaligned_from_suffix","new_slice_unaligned_from_suffix_zeroed","new_slice_unaligned_zeroed","new_slice_zeroed","new_unaligned","new_unaligned_from_prefix","new_unaligned_from_prefix_zeroed","new_unaligned_from_suffix","new_unaligned_from_suffix_zeroed","new_unaligned_zeroed","new_zeroed","new_zeroed","partial_cmp","partial_cmp","read","read_from","read_from_prefix","read_from_suffix","ref_from","ref_from_prefix","ref_from_suffix","set","slice_from_prefix","slice_from_suffix","split_at","transmute","transmute_mut","transmute_ref","try_deref","try_deref_mut","try_from","try_from","try_from_mut","try_from_ref","try_into","try_into","try_read_from","type_id","type_id","update","write","write_to","write_to_prefix","write_to_suffix","zero","BE","BigEndian","ByteOrder","F32","F64","I128","I16","I32","I64","Isize","LE","LittleEndian","MAX_VALUE","MAX_VALUE","MAX_VALUE","MAX_VALUE","MAX_VALUE","NativeEndian","NetworkEndian","U128","U16","U32","U64","Usize","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","ZERO","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_mut","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","big_endian","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","default","default","default","default","default","default","default","default","default","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","from_bytes","get","get","get","get","get","get","get","get","get","get","get","get","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","into","little_endian","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","native_endian","neg","neg","neg","neg","neg","neg","neg","network_endian","new","new","new","new","new","new","new","new","new","new","new","new","not","not","not","not","not","not","not","not","not","not","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set","set","set","set","set","set","set","set","set","set","set","set","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","to_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64","F32","F64","I128","I16","I32","I64","U128","U16","U32","U64"],"q":[[0,"zerocopy"],[116,"zerocopy::byteorder"],[800,"zerocopy::byteorder::big_endian"],[810,"zerocopy::byteorder::little_endian"],[820,"zerocopy::byteorder::native_endian"],[830,"zerocopy::byteorder::network_endian"],[840,"core::marker"],[841,"core::marker"],[842,"core::cmp"],[843,"core::cmp"],[844,"core::fmt"],[845,"core::hash"],[846,"core::cmp"],[847,"core::any"],[848,"core::ops::function"],[849,"core::clone"],[850,"core::num::error"]],"d":["A mutable or immutable reference to a byte slice.","A mutable reference to a byte slice.","Types for which any bit pattern is valid.","Types for which a sequence of bytes all set to zero …","A <code>ByteSlice</code> that conveys no ownership, and so can be …","A <code>ByteSliceMut</code> that conveys no ownership, and so can be …","Types that can be converted to an immutable slice of …","A trait which carries information about a type’s layout …","Types which do not contain any <code>UnsafeCell</code>s.","A typed reference derived from a byte slice.","Types for which some bit patterns are valid.","A type with no alignment requirement.","Types with no alignment requirement.","Gets the bytes of this value.","Gets the bytes of this value mutably.","Gets a mutable raw pointer to the first byte in the slice.","Gets a raw pointer to the first byte in the slice.","","","","","Byte order-aware numeric primitives.","Gets the underlying bytes.","Gets the underlying bytes mutably.","","","","","","","","","Returns a mutable reference to the wrapped <code>T</code> without …","Returns a reference to the wrapped <code>T</code> without checking …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Gets a copy of the inner <code>T</code>.","Gets an unaligned mutable raw pointer to the inner <code>T</code>.","Gets an unaligned raw pointer to the inner <code>T</code>.","","Includes a file and safely transmutes it to a value of an …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes <code>self</code>, returning the inner <code>T</code>.","Converts this <code>Ref</code> into a mutable reference.","Converts this <code>Ref</code> into a reference.","Interprets the given <code>bytes</code> as a <code>&amp;mut Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut Self</code> …","Interprets the given <code>bytes</code> as a <code>&amp;mut [Self]</code> without …","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;mut [Self]</code> …","Constructs a new <code>Ref</code>.","Constructs a new <code>Unalign</code>.","Constructs a new <code>Ref</code> from the prefix of a byte slice.","Constructs a new <code>Ref</code> from the prefix of a byte slice, …","Constructs a new <code>Ref</code> from the suffix of a byte slice.","Constructs a new <code>Ref</code> from the suffix of a byte slice, …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type from the suffix of a …","Constructs a new <code>Ref</code> of a slice type from the prefix of a …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type with no alignment …","Constructs a new <code>Ref</code> for a slice type with no alignment …","Constructs a new <code>Ref</code> of a slice type after zeroing the …","Constructs a new <code>Ref</code> for a type with no alignment …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the prefix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> from the suffix of a byte slice for a …","Constructs a new <code>Ref</code> for a type with no alignment …","Creates an instance of <code>Self</code> from zeroed bytes.","Constructs a new <code>Ref</code> after zeroing the bytes.","","","Reads a copy of <code>T</code>.","Reads a copy of <code>Self</code> from <code>bytes</code>.","Reads a copy of <code>Self</code> from the prefix of <code>bytes</code>.","Reads a copy of <code>Self</code> from the suffix of <code>bytes</code>.","Interprets the given <code>bytes</code> as a <code>&amp;Self</code> without copying.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;Self</code> …","Sets the inner <code>T</code>, dropping the previous value.","Interprets the prefix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Interprets the suffix of the given <code>bytes</code> as a <code>&amp;[Self]</code> with …","Splits the slice at the midpoint.","Safely transmutes a value of one type to a value of …","Safely transmutes a mutable reference of one type to an …","Safely transmutes a mutable or immutable reference of one …","Attempts to return a reference to the wrapped <code>T</code>, failing …","Attempts to return a mutable reference to the wrapped <code>T</code>, …","","","Attempts to interpret a mutable byte slice as a <code>Self</code>.","Attempts to interpret a byte slice as a <code>Self</code>.","","","Attempts to read a <code>Self</code> from a byte slice.","","","Updates the inner <code>T</code> by calling a function on it.","Writes the bytes of <code>t</code> and then forgets <code>t</code>.","Writes a copy of <code>self</code> to <code>bytes</code>.","Writes a copy of <code>self</code> to the prefix of <code>bytes</code>.","Writes a copy of <code>self</code> to the suffix of <code>bytes</code>.","Overwrites <code>self</code> with zeros.","A type alias for <code>BigEndian</code>.","Big-endian byte order.","A type-level representation of byte order.","A 32-bit floating point number stored in a given byte …","A 64-bit floating point number stored in a given byte …","A 128-bit signed integer stored in a given byte order.","A 16-bit signed integer stored in a given byte order.","A 32-bit signed integer stored in a given byte order.","A 64-bit signed integer stored in a given byte order.","A word-sized signed integer stored in a given byte order.","A type alias for <code>LittleEndian</code>.","Little-endian byte order.","The maximum value.","The maximum value.","The maximum value.","The maximum value.","The maximum value.","The endianness used by this platform.","The endianness used in many network protocols.","A 128-bit unsigned integer stored in a given byte order.","A 16-bit unsigned integer stored in a given byte order.","A 32-bit unsigned integer stored in a given byte order.","A 64-bit unsigned integer stored in a given byte order.","A word-sized unsigned integer stored in a given byte order.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","The value zero.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Numeric primitives stored in big-endian byte ordereturns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Constructs a new value from bytes which are already in <code>O</code> …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","Returns the value as a primitive type, possibly performing …","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Numeric primitives stored in little-endian byte order.","","","","","","","","","","","","","","","","","","","","","","","","","Numeric primitives stored in native-endian byte order.","","","","","","","","Numeric primitives stored in network-endian byte order.","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","Constructs a new value, possibly performing an endianness …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","Updates the value in place as a primitive type, possibly …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","Extracts the bytes of <code>self</code> without swapping the byte order.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A 32-bit floating point number stored in big-endian byte …","A 64-bit floating point number stored in big-endian byte …","A 128-bit signed integer stored in big-endian byte order.","A 16-bit signed integer stored in big-endian byte order.","A 32-bit signed integer stored in big-endian byte order.","A 64-bit signed integer stored in big-endian byte order.","A 128-bit unsigned integer stored in big-endian byte order.","A 16-bit unsigned integer stored in big-endian byte order.","A 32-bit unsigned integer stored in big-endian byte order.","A 64-bit unsigned integer stored in big-endian byte order.","A 32-bit floating point number stored in little-endian …","A 64-bit floating point number stored in little-endian …","A 128-bit signed integer stored in little-endian byte …","A 16-bit signed integer stored in little-endian byte order.","A 32-bit signed integer stored in little-endian byte order.","A 64-bit signed integer stored in little-endian byte order.","A 128-bit unsigned integer stored in little-endian byte …","A 16-bit unsigned integer stored in little-endian byte …","A 32-bit unsigned integer stored in little-endian byte …","A 64-bit unsigned integer stored in little-endian byte …","A 32-bit floating point number stored in native-endian …","A 64-bit floating point number stored in native-endian …","A 128-bit signed integer stored in native-endian byte …","A 16-bit signed integer stored in native-endian byte order.","A 32-bit signed integer stored in native-endian byte order.","A 64-bit signed integer stored in native-endian byte order.","A 128-bit unsigned integer stored in native-endian byte …","A 16-bit unsigned integer stored in native-endian byte …","A 32-bit unsigned integer stored in native-endian byte …","A 64-bit unsigned integer stored in native-endian byte …","A 32-bit floating point number stored in network-endian …","A 64-bit floating point number stored in network-endian …","A 128-bit signed integer stored in network-endian byte …","A 16-bit signed integer stored in network-endian byte …","A 32-bit signed integer stored in network-endian byte …","A 64-bit signed integer stored in network-endian byte …","A 128-bit unsigned integer stored in network-endian byte …","A 16-bit unsigned integer stored in network-endian byte …","A 32-bit unsigned integer stored in network-endian byte …","A 64-bit unsigned integer stored in network-endian byte …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,5,6,8,6,8,0,6,6,8,6,8,8,6,8,6,8,8,8,6,8,6,6,8,8,6,8,8,8,8,8,0,6,8,8,6,6,11,11,11,11,11,11,6,8,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,31,6,6,8,6,11,11,11,11,11,11,8,11,11,5,0,0,0,8,8,6,8,34,34,6,8,34,6,8,8,6,1,1,1,31,0,0,0,0,0,0,0,0,0,0,0,0,38,40,41,42,43,0,0,0,0,0,0,0,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,0,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,52,53,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,38,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,52,52,53,53,38,38,38,38,38,38,40,40,40,40,40,40,41,41,41,41,41,41,42,42,42,42,42,42,43,43,43,43,43,43,44,44,44,44,44,44,45,45,45,45,45,45,46,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,48,48,49,49,50,50,52,53,38,38,38,40,40,40,40,41,41,41,41,41,42,42,42,42,42,42,43,43,43,43,44,44,44,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,48,48,48,48,49,49,49,50,50,50,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,49,50,0,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,0,44,45,46,47,48,49,50,0,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,52,53,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,38,38,38,38,38,38,38,38,40,40,40,40,40,41,41,41,42,43,44,44,44,44,44,44,44,44,44,45,45,45,45,45,46,46,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,49,50,52,53,38,40,41,42,43,44,45,46,47,48,49,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":"`````````````{b{{f{d}}}}0{hd}{jd}{ce{}{}}000`{{{l{ce}}}{{f{d}}}jn}{{{l{ce}}}{{f{d}}}hn}{{{A`{c}}}{{A`{c}}}Ab}{{{l{ce}}{l{ce}}}Adj{AfAhAjAln}}{{{A`{c}}{A`{c}}}Ad{AnAh}}{{}{{A`{c}}}B`}{{{l{ce}}}ej{AfAjAln}}{{{A`{c}}}cAn}{{{l{ce}}}eh{AfbAjAln}}1{{{A`{c}}}c{}}0{{{l{ce}}{l{ce}}}Bbj{AfBdAjAln}}{{{A`{c}}{A`{c}}}Bb{AnBd}}{{{l{ce}}Bf}Bhj{AfBjAjAln}}{{{l{ce}}Bf}Bhj{AfBlAjAln}}{{{A`{c}}Bf}Bh{AnBj}}{{{A`{c}}Bf}Bh{AnBl}}{cc{}}0{{{A`{c}}}cAb}{{{A`{c}}}{}{}}0{{{A`{c}}e}Bn{AnC`}Cb}`{ce{}{}}0;{{{l{ce}}}eCd{AfbAjAln}}{{{l{ce}}}eCf{AfAjAln}}{{{f{d}}}{{Ch{Af}}}}00{{{f{d}}}{{Ch{{f{Af}}}}}}{{{f{d}}Cj}{{Ch{{Cl{{f{Af}}{f{d}}}}}}}}{{{f{d}}Cj}{{Ch{{Cl{{f{d}}{f{Af}}}}}}}}{c{{Ch{{l{ce}}}}}j{AjAln}}{c{{A`{c}}}{}}{c{{Ch{{Cl{{l{ce}}c}}}}}j{AjAln}}{c{{Ch{{Cl{{l{ce}}c}}}}}h{AjAln}}{c{{Ch{{Cl{c{l{ce}}}}}}}j{AjAln}}{c{{Ch{{Cl{c{l{ce}}}}}}}h{AjAln}}{{cCj}{{Ch{{Cl{{l{c{f{e}}}}c}}}}}jAl}{{cCj}{{Ch{{Cl{{l{c{f{e}}}}c}}}}}hAl}{{cCj}{{Ch{{Cl{c{l{c{f{e}}}}}}}}}jAl}{{cCj}{{Ch{{Cl{c{l{c{f{e}}}}}}}}}hAl}{c{{Ch{{l{c{f{e}}}}}}}j{AnAl}}{{cCj}{{Ch{{Cl{{l{c{f{e}}}}c}}}}}j{AnAl}}{{cCj}{{Ch{{Cl{{l{c{f{e}}}}c}}}}}h{AnAl}}{{cCj}{{Ch{{Cl{c{l{c{f{e}}}}}}}}}j{AnAl}}{{cCj}{{Ch{{Cl{c{l{c{f{e}}}}}}}}}h{AnAl}}{c{{Ch{{l{c{f{e}}}}}}}h{AnAl}}{c{{Ch{{l{c{f{e}}}}}}}hAl}{c{{Ch{{l{ce}}}}}j{AnAjAln}}{c{{Ch{{Cl{{l{ce}}c}}}}}j{AnAjAln}}{c{{Ch{{Cl{{l{ce}}c}}}}}h{AnAjAln}}{c{{Ch{{Cl{c{l{ce}}}}}}}j{AnAjAln}}{c{{Ch{{Cl{c{l{ce}}}}}}}h{AnAjAln}}{c{{Ch{{l{ce}}}}}h{AnAjAln}}{{}Cn}{c{{Ch{{l{ce}}}}}h{AjAln}}{{{l{ce}}{l{ce}}}{{Ch{Ad}}}j{AfD`AjAln}}{{{A`{c}}{A`{c}}}{{Ch{Ad}}}{AnD`}}{{{l{ce}}}ejAf}{{{f{d}}}{{Ch{Af}}}}00000{{{A`{c}}c}Bn{}}{{{f{d}}Cj}{{Ch{{Cl{{f{Af}}{f{d}}}}}}}}{{{f{d}}Cj}{{Ch{{Cl{{f{d}}{f{Af}}}}}}}}{{jCj}{{Cl{jj}}}}```{{{A`{c}}}{{Ch{c}}}{}}0{c{{Db{e}}}{}{}}0{{{f{d}}}{{Ch{Dd}}}}0110{cDf{}}0{{{A`{c}}g}e{}{}{{Dj{c}{{Dh{e}}}}}}{{{l{ce}}e}Bnhb}{{b{f{d}}}{{Ch{Bn}}}}00{CnBn}````````````````````````````````````{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}{Fd{c}}}{{Fd{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Fb{c}}{Fb{c}}}BnDn}{{{Fd{c}}{Fd{c}}}BnDn}{{{Dl{c}}}{{Ff{d}}}Dn}{{{E`{c}}}{{Ff{d}}}Dn}{{{Eb{c}}}{{Ff{d}}}Dn}{{{Ed{c}}}{{Ff{d}}}Dn}{{{Ef{c}}}{{Ff{d}}}Dn}{{{Eh{c}}}{{Ff{d}}}Dn}{{{Ej{c}}}{{Ff{d}}}Dn}{{{El{c}}}{{Ff{d}}}Dn}{{{En{c}}}{{Ff{d}}}Dn}{{{F`{c}}}{{Ff{d}}}Dn}{{{Fb{c}}}{{Ff{d}}}Dn}{{{Fd{c}}}{{Ff{d}}}Dn};:9876543210`{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{ce{}{}}000000000000000000000000000{FhFh}{FjFj}{{{Dl{c}}}{{Dl{c}}}Fl}{{{E`{c}}}{{E`{c}}}Fl}{{{Eb{c}}}{{Eb{c}}}Fl}{{{Ed{c}}}{{Ed{c}}}Fl}{{{Ef{c}}}{{Ef{c}}}Fl}{{{Eh{c}}}{{Eh{c}}}Fl}{{{Ej{c}}}{{Ej{c}}}Fl}{{{El{c}}}{{El{c}}}Fl}{{{En{c}}}{{En{c}}}Fl}{{{F`{c}}}{{F`{c}}}Fl}{{{Fb{c}}}{{Fb{c}}}Fl}{{{Fd{c}}}{{Fd{c}}}Fl}{{FhFh}Ad}{{FjFj}Ad}{{{Dl{c}}{Dl{c}}}AdDn}{{{E`{c}}{E`{c}}}AdDn}{{{Eb{c}}{Eb{c}}}AdDn}{{{Ed{c}}{Ed{c}}}AdDn}{{{Ef{c}}{Ef{c}}}AdDn}{{{Eh{c}}{Eh{c}}}AdDn}{{{Ej{c}}{Ej{c}}}AdDn}{{{El{c}}{El{c}}}AdDn}{{{En{c}}{En{c}}}AdDn}{{{F`{c}}{F`{c}}}AdDn}{{}{{Dl{c}}}{}}{{}{{E`{c}}}{}}{{}{{Eb{c}}}{}}{{}{{Ed{c}}}{}}{{}{{Ef{c}}}{}}{{}{{Eh{c}}}{}}{{}{{Ej{c}}}{}}{{}{{El{c}}}{}}{{}{{En{c}}}{}}{{}{{F`{c}}}{}}{{}{{Fb{c}}}{}}{{}{{Fd{c}}}{}}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}{Fd{c}}}{{Fd{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Fb{c}}{Fb{c}}}BnDn}{{{Fd{c}}{Fd{c}}}BnDn}{{FhFh}Bb}{{FjFj}Bb}{{{Dl{c}}{Ff{d}}}BbDn}{{{Dl{c}}{Dl{c}}}BbBd}{{{E`{c}}{Ff{d}}}BbDn}{{{E`{c}}{E`{c}}}BbBd}{{{Eb{c}}{Ff{d}}}BbDn}{{{Eb{c}}{Eb{c}}}BbBd}{{{Ed{c}}{Ff{d}}}BbDn}{{{Ed{c}}{Ed{c}}}BbBd}{{{Ef{c}}{Ff{d}}}BbDn}{{{Ef{c}}{Ef{c}}}BbBd}{{{Eh{c}}{Eh{c}}}BbBd}{{{Eh{c}}{Ff{d}}}BbDn}{{{Ej{c}}{Ff{d}}}BbDn}{{{Ej{c}}{Ej{c}}}BbBd}{{{El{c}}{Ff{d}}}BbDn}{{{El{c}}{El{c}}}BbBd}{{{En{c}}{Ff{d}}}BbDn}{{{En{c}}{En{c}}}BbBd}{{{F`{c}}{F`{c}}}BbBd}{{{F`{c}}{Ff{d}}}BbDn}{{{Fb{c}}{Fb{c}}}BbBd}{{{Fb{c}}{Ff{d}}}BbDn}{{{Fd{c}}{Ff{d}}}BbDn}{{{Fd{c}}{Fd{c}}}BbBd}{{FhBf}Bh}0{{FjBf}Bh}0{{{Dl{c}}Bf}BhDn}00000{{{E`{c}}Bf}BhDn}00000{{{Eb{c}}Bf}BhDn}00000{{{Ed{c}}Bf}BhDn}00000{{{Ef{c}}Bf}BhDn}00000{{{Eh{c}}Bf}BhDn}00000{{{Ej{c}}Bf}BhDn}00000{{{El{c}}Bf}BhDn}00000{{{En{c}}Bf}BhDn}00000{{{F`{c}}Bf}BhDn}00000{{{Fb{c}}Bf}BhDn}0{{{Fd{c}}Bf}BhDn}0{cc{}}0{Fn{{Dl{c}}}Dn}{{{Ff{d}}}{{Dl{c}}}Dn}22{G`{{E`{c}}}Dn}{{{Dl{c}}}{{E`{e}}}DnDn}{{{Ff{d}}}{{E`{c}}}Dn}{Gb{{Eb{c}}}Dn}{{{E`{c}}}{{Eb{e}}}DnDn}{{{Ff{d}}}{{Eb{c}}}Dn}{{{Dl{c}}}{{Eb{e}}}DnDn}9{{{Ff{d}}}{{Ed{c}}}Dn}{{{E`{c}}}{{Ed{e}}}DnDn}{Gd{{Ed{c}}}Dn}{{{Eb{c}}}{{Ed{e}}}DnDn}={{{Dl{c}}}{{Ed{e}}}DnDn}{{{Ff{d}}}{{Ef{c}}}Dn}{Cj{{Ef{c}}}Dn}{cc{}}{{{Dl{c}}}{{Ef{e}}}DnDn}{{{Ff{d}}}{{Eh{c}}}Dn}2{Gf{{Eh{c}}}Dn}3{{{Eh{c}}}{{Ej{e}}}DnDn}{{{Ff{d}}}{{Ej{c}}}Dn}{Gh{{Ej{c}}}Dn}{{{Ej{c}}}{{El{e}}}DnDn}7{Gj{{El{c}}}Dn}{{{Ff{d}}}{{El{c}}}Dn}{{{Eh{c}}}{{El{e}}}DnDn}{{{Ff{d}}}{{En{c}}}Dn}{{{El{c}}}{{En{e}}}DnDn}{{{Ej{c}}}{{En{e}}}DnDn}{Gl{{En{c}}}Dn}>{{{Eh{c}}}{{En{e}}}DnDn}{{{Ff{d}}}{{F`{c}}}Dn}{{{Eh{c}}}{{F`{e}}}DnDn}{Gn{{F`{c}}}Dn}{cc{}}{H`{{Fb{c}}}Dn}{{{Ff{d}}}{{Fb{c}}}Dn}2{{{Ff{d}}}{{Fd{c}}}Dn}{Hb{{Fd{c}}}Dn}{{{Fb{c}}}{{Fd{e}}}DnDn}5{{{Ff{d}}}{{Dl{c}}}{}}{{{Ff{d}}}{{E`{c}}}{}}{{{Ff{d}}}{{Eb{c}}}{}}{{{Ff{d}}}{{Ed{c}}}{}}{{{Ff{d}}}{{Ef{c}}}{}}{{{Ff{d}}}{{Eh{c}}}{}}{{{Ff{d}}}{{Ej{c}}}{}}{{{Ff{d}}}{{El{c}}}{}}{{{Ff{d}}}{{En{c}}}{}}{{{Ff{d}}}{{F`{c}}}{}}{{{Ff{d}}}{{Fb{c}}}{}}{{{Ff{d}}}{{Fd{c}}}{}}{{{Dl{c}}}FnDn}{{{E`{c}}}G`Dn}{{{Eb{c}}}GbDn}{{{Ed{c}}}GdDn}{{{Ef{c}}}CjDn}{{{Eh{c}}}GfDn}{{{Ej{c}}}GhDn}{{{El{c}}}GjDn}{{{En{c}}}GlDn}{{{F`{c}}}GnDn}{{{Fb{c}}}H`Dn}{{{Fd{c}}}HbDn}{{{Dl{c}}e}BnC`Cb}{{{E`{c}}e}BnC`Cb}{{{Eb{c}}e}BnC`Cb}{{{Ed{c}}e}BnC`Cb}{{{Ef{c}}e}BnC`Cb}{{{Eh{c}}e}BnC`Cb}{{{Ej{c}}e}BnC`Cb}{{{El{c}}e}BnC`Cb}{{{En{c}}e}BnC`Cb}{{{F`{c}}e}BnC`Cb}{{{Fb{c}}e}BnC`Cb}{{{Fd{c}}e}BnC`Cb}{ce{}{}}0000000000000`{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}{Fd{c}}}{{Fd{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Fb{c}}{Fb{c}}}BnDn}{{{Fd{c}}{Fd{c}}}BnDn}`{{{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}}{{El{c}}}Dn}{{{En{c}}}{{En{c}}}Dn}{{{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}}{{Fd{c}}}Dn}`{Fn{{Dl{c}}}Dn}{G`{{E`{c}}}Dn}{Gb{{Eb{c}}}Dn}{Gd{{Ed{c}}}Dn}{Cj{{Ef{c}}}Dn}{Gf{{Eh{c}}}Dn}{Gh{{Ej{c}}}Dn}{Gj{{El{c}}}Dn}{Gl{{En{c}}}Dn}{Gn{{F`{c}}}Dn}{H`{{Fb{c}}}Dn}{Hb{{Fd{c}}}Dn}{{{Dl{c}}}{{Dl{c}}}{}}{{{E`{c}}}{{E`{c}}}{}}{{{Eb{c}}}{{Eb{c}}}{}}{{{Ed{c}}}{{Ed{c}}}{}}{{{Ef{c}}}{{Ef{c}}}{}}{{{Eh{c}}}{{Eh{c}}}{}}{{{Ej{c}}}{{Ej{c}}}{}}{{{El{c}}}{{El{c}}}{}}{{{En{c}}}{{En{c}}}{}}{{{F`{c}}}{{F`{c}}}{}}{{FhFh}{{Ch{Ad}}}}{{FjFj}{{Ch{Ad}}}}{{{Dl{c}}{Dl{c}}}{{Ch{Ad}}}Dn}{{{E`{c}}{E`{c}}}{{Ch{Ad}}}Dn}{{{Eb{c}}{Eb{c}}}{{Ch{Ad}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ch{Ad}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ch{Ad}}}Dn}{{{Eh{c}}{Eh{c}}}{{Ch{Ad}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ch{Ad}}}Dn}{{{El{c}}{El{c}}}{{Ch{Ad}}}Dn}{{{En{c}}{En{c}}}{{Ch{Ad}}}Dn}{{{F`{c}}{F`{c}}}{{Ch{Ad}}}Dn}{{{Fb{c}}{Fb{c}}}{{Ch{Ad}}}Dn}{{{Fd{c}}{Fd{c}}}{{Ch{Ad}}}Dn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}{Fd{c}}}{{Fd{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Fb{c}}{Fb{c}}}BnDn}{{{Fd{c}}{Fd{c}}}BnDn}{{{Dl{c}}Fn}BnDn}{{{E`{c}}G`}BnDn}{{{Eb{c}}Gb}BnDn}{{{Ed{c}}Gd}BnDn}{{{Ef{c}}Cj}BnDn}{{{Eh{c}}Gf}BnDn}{{{Ej{c}}Gh}BnDn}{{{El{c}}Gj}BnDn}{{{En{c}}Gl}BnDn}{{{F`{c}}Gn}BnDn}{{{Fb{c}}H`}BnDn}{{{Fd{c}}Hb}BnDn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Dl{c}}{Dl{c}}}{{Dl{c}}}Dn}{{{E`{c}}{E`{c}}}{{E`{c}}}Dn}{{{Eb{c}}{Eb{c}}}{{Eb{c}}}Dn}{{{Ed{c}}{Ed{c}}}{{Ed{c}}}Dn}{{{Ef{c}}{Ef{c}}}{{Ef{c}}}Dn}{{{Eh{c}}{Eh{c}}}{{Eh{c}}}Dn}{{{Ej{c}}{Ej{c}}}{{Ej{c}}}Dn}{{{El{c}}{El{c}}}{{El{c}}}Dn}{{{En{c}}{En{c}}}{{En{c}}}Dn}{{{F`{c}}{F`{c}}}{{F`{c}}}Dn}{{{Fb{c}}{Fb{c}}}{{Fb{c}}}Dn}{{{Fd{c}}{Fd{c}}}{{Fd{c}}}Dn}{{{Dl{c}}{Dl{c}}}BnDn}{{{E`{c}}{E`{c}}}BnDn}{{{Eb{c}}{Eb{c}}}BnDn}{{{Ed{c}}{Ed{c}}}BnDn}{{{Ef{c}}{Ef{c}}}BnDn}{{{Eh{c}}{Eh{c}}}BnDn}{{{Ej{c}}{Ej{c}}}BnDn}{{{El{c}}{El{c}}}BnDn}{{{En{c}}{En{c}}}BnDn}{{{F`{c}}{F`{c}}}BnDn}{{{Fb{c}}{Fb{c}}}BnDn}{{{Fd{c}}{Fd{c}}}BnDn}{{{Dl{c}}}{{Ff{d}}}{}}{{{E`{c}}}{{Ff{d}}}{}}{{{Eb{c}}}{{Ff{d}}}{}}{{{Ed{c}}}{{Ff{d}}}{}}{{{Ef{c}}}{{Ff{d}}}{}}{{{Eh{c}}}{{Ff{d}}}{}}{{{Ej{c}}}{{Ff{d}}}{}}{{{El{c}}}{{Ff{d}}}{}}{{{En{c}}}{{Ff{d}}}{}}{{{F`{c}}}{{Ff{d}}}{}}{{{Fb{c}}}{{Ff{d}}}{}}{{{Fd{c}}}{{Ff{d}}}{}}{c{{Db{e}}}{}{}}0{{{E`{c}}}{{Db{{Dl{e}}Hd}}}DnDn}{G`{{Db{{Dl{c}}Hd}}}Dn}{{{Ed{c}}}{{Db{{Dl{e}}Hd}}}DnDn}{{{Eb{c}}}{{Db{{Dl{e}}Hd}}}DnDn}{{{Ef{c}}}{{Db{{Dl{e}}Hd}}}DnDn}{Cj{{Db{{Dl{c}}Hd}}}Dn}{Gd{{Db{{Dl{c}}Hd}}}Dn}{Gb{{Db{{Dl{c}}Hd}}}Dn}88{Gb{{Db{{E`{c}}Hd}}}Dn}{{{Eb{c}}}{{Db{{E`{e}}Hd}}}DnDn}{{{Ed{c}}}{{Db{{E`{e}}Hd}}}DnDn}{Gd{{Db{{E`{c}}Hd}}}Dn}{Gd{{Db{{Eb{c}}Hd}}}Dn}{{{Ed{c}}}{{Db{{Eb{e}}Hd}}}DnDn}>>>{Gh{{Db{{Eh{c}}Hd}}}Dn}{{{El{c}}}{{Db{{Eh{e}}Hd}}}DnDn}{Gn{{Db{{Eh{c}}Hd}}}Dn}{{{F`{c}}}{{Db{{Eh{e}}Hd}}}DnDn}{Gl{{Db{{Eh{c}}Hd}}}Dn}{{{En{c}}}{{Db{{Eh{e}}Hd}}}DnDn}{{{Ej{c}}}{{Db{{Eh{e}}Hd}}}DnDn}{c{{Db{e}}}{}{}}{Gj{{Db{{Eh{c}}Hd}}}Dn}{Gj{{Db{{Ej{c}}Hd}}}Dn}{Gl{{Db{{Ej{c}}Hd}}}Dn}{{{El{c}}}{{Db{{Ej{e}}Hd}}}DnDn}4{{{En{c}}}{{Db{{Ej{e}}Hd}}}DnDn}{{{En{c}}}{{Db{{El{e}}Hd}}}DnDn}6{Gl{{Db{{El{c}}Hd}}}Dn}777777777777777777{cDf{}}0000000000000````````````````````````````````````````","c":[],"p":[[10,"IntoBytes",0],[1,"u8"],[1,"slice"],[10,"ByteSliceMut",0],[10,"ByteSlice",0],[5,"Ref",0],[10,"Sized",840],[5,"Unalign",0],[10,"Copy",840],[6,"Ordering",841],[10,"FromBytes",0],[10,"Ord",841],[10,"KnownLayout",0],[10,"NoCell",0],[10,"Unaligned",0],[10,"Default",842],[1,"bool"],[10,"PartialEq",841],[5,"Formatter",843],[8,"Result",843],[10,"Display",843],[10,"Debug",843],[1,"unit"],[10,"Hash",844],[10,"Hasher",844],[10,"IntoByteSliceMut",0],[10,"IntoByteSlice",0],[6,"Option",845],[1,"usize"],[1,"tuple"],[10,"FromZeros",0],[10,"PartialOrd",841],[6,"Result",846],[10,"TryFromBytes",0],[5,"TypeId",847],[17,"Output"],[10,"FnOnce",848],[5,"U16",116],[10,"ByteOrder",116],[5,"U32",116],[5,"U64",116],[5,"U128",116],[5,"Usize",116],[5,"I16",116],[5,"I32",116],[5,"I64",116],[5,"I128",116],[5,"Isize",116],[5,"F32",116],[5,"F64",116],[1,"array"],[6,"BigEndian",116],[6,"LittleEndian",116],[10,"Clone",849],[1,"u16"],[1,"u32"],[1,"u64"],[1,"u128"],[1,"i16"],[1,"i32"],[1,"i64"],[1,"i128"],[1,"isize"],[1,"f32"],[1,"f64"],[5,"TryFromIntError",850]],"b":[[36,"impl-Display-for-Ref%3CB,+T%3E"],[37,"impl-Debug-for-Ref%3CB,+T%3E"],[38,"impl-Display-for-Unalign%3CT%3E"],[39,"impl-Debug-for-Unalign%3CT%3E"],[353,"impl-PartialEq%3C%5Bu8;+2%5D%3E-for-U16%3CO%3E"],[354,"impl-PartialEq-for-U16%3CO%3E"],[355,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-U32%3CO%3E"],[356,"impl-PartialEq-for-U32%3CO%3E"],[357,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-U64%3CO%3E"],[358,"impl-PartialEq-for-U64%3CO%3E"],[359,"impl-PartialEq%3C%5Bu8;+16%5D%3E-for-U128%3CO%3E"],[360,"impl-PartialEq-for-U128%3CO%3E"],[361,"impl-PartialEq%3C%5Bu8;+mem::size_of::%3Cusize%3E()%5D%3E-for-Usize%3CO%3E"],[362,"impl-PartialEq-for-Usize%3CO%3E"],[363,"impl-PartialEq-for-I16%3CO%3E"],[364,"impl-PartialEq%3C%5Bu8;+2%5D%3E-for-I16%3CO%3E"],[365,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-I32%3CO%3E"],[366,"impl-PartialEq-for-I32%3CO%3E"],[367,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-I64%3CO%3E"],[368,"impl-PartialEq-for-I64%3CO%3E"],[369,"impl-PartialEq%3C%5Bu8;+16%5D%3E-for-I128%3CO%3E"],[370,"impl-PartialEq-for-I128%3CO%3E"],[371,"impl-PartialEq-for-Isize%3CO%3E"],[372,"impl-PartialEq%3C%5Bu8;+mem::size_of::%3Cisize%3E()%5D%3E-for-Isize%3CO%3E"],[373,"impl-PartialEq-for-F32%3CO%3E"],[374,"impl-PartialEq%3C%5Bu8;+4%5D%3E-for-F32%3CO%3E"],[375,"impl-PartialEq%3C%5Bu8;+8%5D%3E-for-F64%3CO%3E"],[376,"impl-PartialEq-for-F64%3CO%3E"],[377,"impl-Debug-for-BigEndian"],[378,"impl-Display-for-BigEndian"],[379,"impl-Display-for-LittleEndian"],[380,"impl-Debug-for-LittleEndian"],[381,"impl-UpperHex-for-U16%3CO%3E"],[382,"impl-Display-for-U16%3CO%3E"],[383,"impl-Octal-for-U16%3CO%3E"],[384,"impl-Binary-for-U16%3CO%3E"],[385,"impl-Debug-for-U16%3CO%3E"],[386,"impl-LowerHex-for-U16%3CO%3E"],[387,"impl-Debug-for-U32%3CO%3E"],[388,"impl-LowerHex-for-U32%3CO%3E"],[389,"impl-UpperHex-for-U32%3CO%3E"],[390,"impl-Octal-for-U32%3CO%3E"],[391,"impl-Binary-for-U32%3CO%3E"],[392,"impl-Display-for-U32%3CO%3E"],[393,"impl-Debug-for-U64%3CO%3E"],[394,"impl-Octal-for-U64%3CO%3E"],[395,"impl-Display-for-U64%3CO%3E"],[396,"impl-LowerHex-for-U64%3CO%3E"],[397,"impl-UpperHex-for-U64%3CO%3E"],[398,"impl-Binary-for-U64%3CO%3E"],[399,"impl-Display-for-U128%3CO%3E"],[400,"impl-Debug-for-U128%3CO%3E"],[401,"impl-Binary-for-U128%3CO%3E"],[402,"impl-Octal-for-U128%3CO%3E"],[403,"impl-LowerHex-for-U128%3CO%3E"],[404,"impl-UpperHex-for-U128%3CO%3E"],[405,"impl-UpperHex-for-Usize%3CO%3E"],[406,"impl-Binary-for-Usize%3CO%3E"],[407,"impl-Octal-for-Usize%3CO%3E"],[408,"impl-LowerHex-for-Usize%3CO%3E"],[409,"impl-Debug-for-Usize%3CO%3E"],[410,"impl-Display-for-Usize%3CO%3E"],[411,"impl-Debug-for-I16%3CO%3E"],[412,"impl-LowerHex-for-I16%3CO%3E"],[413,"impl-UpperHex-for-I16%3CO%3E"],[414,"impl-Display-for-I16%3CO%3E"],[415,"impl-Binary-for-I16%3CO%3E"],[416,"impl-Octal-for-I16%3CO%3E"],[417,"impl-Debug-for-I32%3CO%3E"],[418,"impl-Display-for-I32%3CO%3E"],[419,"impl-Binary-for-I32%3CO%3E"],[420,"impl-UpperHex-for-I32%3CO%3E"],[421,"impl-Octal-for-I32%3CO%3E"],[422,"impl-LowerHex-for-I32%3CO%3E"],[423,"impl-Display-for-I64%3CO%3E"],[424,"impl-UpperHex-for-I64%3CO%3E"],[425,"impl-Octal-for-I64%3CO%3E"],[426,"impl-Debug-for-I64%3CO%3E"],[427,"impl-LowerHex-for-I64%3CO%3E"],[428,"impl-Binary-for-I64%3CO%3E"],[429,"impl-LowerHex-for-I128%3CO%3E"],[430,"impl-Display-for-I128%3CO%3E"],[431,"impl-UpperHex-for-I128%3CO%3E"],[432,"impl-Debug-for-I128%3CO%3E"],[433,"impl-Octal-for-I128%3CO%3E"],[434,"impl-Binary-for-I128%3CO%3E"],[435,"impl-UpperHex-for-Isize%3CO%3E"],[436,"impl-Binary-for-Isize%3CO%3E"],[437,"impl-Display-for-Isize%3CO%3E"],[438,"impl-LowerHex-for-Isize%3CO%3E"],[439,"impl-Octal-for-Isize%3CO%3E"],[440,"impl-Debug-for-Isize%3CO%3E"],[441,"impl-Display-for-F32%3CO%3E"],[442,"impl-Debug-for-F32%3CO%3E"],[443,"impl-Display-for-F64%3CO%3E"],[444,"impl-Debug-for-F64%3CO%3E"],[447,"impl-From%3Cu16%3E-for-U16%3CO%3E"],[448,"impl-From%3C%5Bu8;+2%5D%3E-for-U16%3CO%3E"],[451,"impl-From%3Cu32%3E-for-U32%3CO%3E"],[452,"impl-From%3CU16%3CO%3E%3E-for-U32%3CP%3E"],[453,"impl-From%3C%5Bu8;+4%5D%3E-for-U32%3CO%3E"],[454,"impl-From%3Cu64%3E-for-U64%3CO%3E"],[455,"impl-From%3CU32%3CO%3E%3E-for-U64%3CP%3E"],[456,"impl-From%3C%5Bu8;+8%5D%3E-for-U64%3CO%3E"],[457,"impl-From%3CU16%3CO%3E%3E-for-U64%3CP%3E"],[459,"impl-From%3C%5Bu8;+16%5D%3E-for-U128%3CO%3E"],[460,"impl-From%3CU32%3CO%3E%3E-for-U128%3CP%3E"],[461,"impl-From%3Cu128%3E-for-U128%3CO%3E"],[462,"impl-From%3CU64%3CO%3E%3E-for-U128%3CP%3E"],[464,"impl-From%3CU16%3CO%3E%3E-for-U128%3CP%3E"],[465,"impl-From%3C%5Bu8;+mem::size_of::%3Cusize%3E()%5D%3E-for-Usize%3CO%3E"],[466,"impl-From%3Cusize%3E-for-Usize%3CO%3E"],[468,"impl-From%3CU16%3CO%3E%3E-for-Usize%3CP%3E"],[469,"impl-From%3C%5Bu8;+2%5D%3E-for-I16%3CO%3E"],[471,"impl-From%3Ci16%3E-for-I16%3CO%3E"],[473,"impl-From%3CI16%3CO%3E%3E-for-I32%3CP%3E"],[474,"impl-From%3C%5Bu8;+4%5D%3E-for-I32%3CO%3E"],[475,"impl-From%3Ci32%3E-for-I32%3CO%3E"],[476,"impl-From%3CI32%3CO%3E%3E-for-I64%3CP%3E"],[478,"impl-From%3Ci64%3E-for-I64%3CO%3E"],[479,"impl-From%3C%5Bu8;+8%5D%3E-for-I64%3CO%3E"],[480,"impl-From%3CI16%3CO%3E%3E-for-I64%3CP%3E"],[481,"impl-From%3C%5Bu8;+16%5D%3E-for-I128%3CO%3E"],[482,"impl-From%3CI64%3CO%3E%3E-for-I128%3CP%3E"],[483,"impl-From%3CI32%3CO%3E%3E-for-I128%3CP%3E"],[484,"impl-From%3Ci128%3E-for-I128%3CO%3E"],[486,"impl-From%3CI16%3CO%3E%3E-for-I128%3CP%3E"],[487,"impl-From%3C%5Bu8;+mem::size_of::%3Cisize%3E()%5D%3E-for-Isize%3CO%3E"],[488,"impl-From%3CI16%3CO%3E%3E-for-Isize%3CP%3E"],[489,"impl-From%3Cisize%3E-for-Isize%3CO%3E"],[491,"impl-From%3Cf32%3E-for-F32%3CO%3E"],[492,"impl-From%3C%5Bu8;+4%5D%3E-for-F32%3CO%3E"],[494,"impl-From%3C%5Bu8;+8%5D%3E-for-F64%3CO%3E"],[495,"impl-From%3Cf64%3E-for-F64%3CO%3E"],[496,"impl-From%3CF32%3CO%3E%3E-for-F64%3CP%3E"],[732,"impl-TryFrom%3CU32%3CP%3E%3E-for-U16%3CO%3E"],[733,"impl-TryFrom%3Cu32%3E-for-U16%3CO%3E"],[734,"impl-TryFrom%3CU128%3CP%3E%3E-for-U16%3CO%3E"],[735,"impl-TryFrom%3CU64%3CP%3E%3E-for-U16%3CO%3E"],[736,"impl-TryFrom%3CUsize%3CP%3E%3E-for-U16%3CO%3E"],[737,"impl-TryFrom%3Cusize%3E-for-U16%3CO%3E"],[738,"impl-TryFrom%3Cu128%3E-for-U16%3CO%3E"],[739,"impl-TryFrom%3Cu64%3E-for-U16%3CO%3E"],[742,"impl-TryFrom%3Cu64%3E-for-U32%3CO%3E"],[743,"impl-TryFrom%3CU64%3CP%3E%3E-for-U32%3CO%3E"],[744,"impl-TryFrom%3CU128%3CP%3E%3E-for-U32%3CO%3E"],[745,"impl-TryFrom%3Cu128%3E-for-U32%3CO%3E"],[746,"impl-TryFrom%3Cu128%3E-for-U64%3CO%3E"],[747,"impl-TryFrom%3CU128%3CP%3E%3E-for-U64%3CO%3E"],[751,"impl-TryFrom%3Ci32%3E-for-I16%3CO%3E"],[752,"impl-TryFrom%3CI64%3CP%3E%3E-for-I16%3CO%3E"],[753,"impl-TryFrom%3Cisize%3E-for-I16%3CO%3E"],[754,"impl-TryFrom%3CIsize%3CP%3E%3E-for-I16%3CO%3E"],[755,"impl-TryFrom%3Ci128%3E-for-I16%3CO%3E"],[756,"impl-TryFrom%3CI128%3CP%3E%3E-for-I16%3CO%3E"],[757,"impl-TryFrom%3CI32%3CP%3E%3E-for-I16%3CO%3E"],[759,"impl-TryFrom%3Ci64%3E-for-I16%3CO%3E"],[760,"impl-TryFrom%3Ci64%3E-for-I32%3CO%3E"],[761,"impl-TryFrom%3Ci128%3E-for-I32%3CO%3E"],[762,"impl-TryFrom%3CI64%3CP%3E%3E-for-I32%3CO%3E"],[764,"impl-TryFrom%3CI128%3CP%3E%3E-for-I32%3CO%3E"],[765,"impl-TryFrom%3CI128%3CP%3E%3E-for-I64%3CO%3E"],[767,"impl-TryFrom%3Ci128%3E-for-I64%3CO%3E"]],"a":{"include_bytes":[46],"include_data":[46],"include_type":[46]}}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
